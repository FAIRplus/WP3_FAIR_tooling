{"remainingRequest":"/home/eva/tooldiscoverer/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eva/tooldiscoverer/src/views/Run.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/eva/tooldiscoverer/src/views/Run.vue","mtime":1640025467485},{"path":"/home/eva/tooldiscoverer/node_modules/css-loader/dist/cjs.js","mtime":1640024185304},{"path":"/home/eva/tooldiscoverer/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1640024186212},{"path":"/home/eva/tooldiscoverer/node_modules/postcss-loader/src/index.js","mtime":1640024185644},{"path":"/home/eva/tooldiscoverer/node_modules/cache-loader/dist/cjs.js","mtime":1640024184632},{"path":"/home/eva/tooldiscoverer/node_modules/vue-loader/lib/index.js","mtime":1640024185900}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNlcnJvckZvcm1hdHsKICBjb2xvcjogZGFya3JlZDsKICBmb250LXNpemU6IHNtYWxsOwp9Ci5pbnB1dC1ydW4tYnRuewogICAgd2lkdGg6IDNlbTsKICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZWVuOwogICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47CiAgICBjb2xvcjogd2hpdGU7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIG1hcmdpbjogMWVtOwogICAgbWFyZ2luLWxlZnQ6IDA7Cn0KLmlucHV0LWFpZC1idG57CiAgICBib3JkZXI6IDFweCBzb2xpZCBncmV5OyAKICAgIGNvbG9yOiBncmV5OwogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICBwYWRkaW5nOiAyJTsKICAgIG1hcmdpbjogMnB4OwogICAgd2lkdGg6IDEwMCU7CiAgICBtYXJnaW4tdG9wOiAxZW07Cn0KLmlucHV0X2xhYmVsewogICAgZm9udC1zaXplOiBzbWFsbGVyOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KLnJ1bl9tYWluewogICAgdGV4dC1hbGlnbjogbGVmdDsKICAgIGFsaWduLWl0ZW1zOiBsZWZ0OwogICAgbWFyZ2luLWJvdHRvbTogMmVtOwogICAgZm9udC1zaXplOiBzbWFsbGVyOwp9Cgo="},{"version":3,"sources":["Run.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Run.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container run_main\">\n    <div class=\"row\">\n        <h4>Input</h4>\n        <p>Enter keywords and their respective weights (optionally) to discover tools.</p>\n        <div class=\"col-sm-8 d-flex\">\n            <form action=\"\" method=\"post\" id=\"input_text\">\n                <textarea v-model=inputTextarea name=\"input_data\" class=\"form-control\" id=\"input_textarea\" aria-label=\"\"></textarea>\n                <!--div name=\"input_data\" contenteditable=\"true\" id=\"input_textarea\"></div-->\n                <small id=\"\" class=\"form-text text-muted\">For further axplanation on input format, see <a href=\"/help\">here</a>.<br></small>\n                <button type=\"button\" name=\"run\" value=\"Run\" v-on:click=runDiscoverer class=\"input-run-btn\" id=\"run_button\">Run</button>\n                <span v-if=formatErrorVisible id=\"errorFormat\"><i class=\"fas fa-times\"></i> Error: invalid format detected in line <span v-html=\"lineNum\"></span></span>\n            </form>\n        </div>\n        <div class=\"col-sm-2 d-flex\">\n            <div class=\"btn-group-vertical\">\n                <button type=\"button\" class=\"input-aid-btn\" id=\"input_example_button\" v-on:click=sampleInput>Show an example</button>\n                <button type=\"button\" class=\"input-aid-btn\" id=\"input_clear_button\" v-on:click=clearInput>Clear</button>\n            </div>\n        </div>\n    </div>\n      <div>\n        <div v-if=querying style=\"min-height: 4px;\">\n          <!-- query progress bar, see eaxample https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/examples/v-progress-linear/prop-query.vue -->\n          <v-progress-linear\n            v-model=\"value\"\n            :active=\"show\"\n            :indeterminate=\"query\"\n            :query=\"true\"\n          ></v-progress-linear>\n        </div>\n        <Results v-if=\"resultsVisible\" :tools=\"results\" :inputParameters=\"inputParameters\" />\n      </div>\n</div>\n</template>\n<script>\nimport Results from '../components/Results.vue'\nimport axios from 'axios'\nexport default {\n  name: 'Run',\n  components: {\n    Results\n  },\n  data () {\n    return {\n      inputTextarea: '',\n      formatErrorVisible: false,\n      lineNum: 0,\n      results: [],\n      querying: false,\n      resultsVisible: false,\n      value: 0,\n      query: false,\n      show: true,\n      interval: 0,\n      /**\n     * tools should come from an axios.get(), it is hard coded for demonstration purposes\n     */\n      inputParameters: [\n        {\n          keyword: 'ontology mapping',\n          weight: '0.8'\n        },\n        {\n          keyword: 'ontology crosswalk',\n          weight: '0.9'\n        }\n      ]\n    }\n  },\n  methods: {\n    sampleInput () {\n      this.inputTextarea = 'Ontology annotation, 1\\nsemantic annotation, 0.8\\nText mining, 0.5\\nText annotation, 0.5\\nEntity tagging, 0.5\\nEntity recognition, 0.75\\nNamed-entity and concept recognition, 0.75\\nontology and terminology, 1\\nQuery expansion, 0.75\\nFree text mapping, 1\\nText Annotation, 1\\nAnnotation, 0.5'\n      this.resultsVisible = false\n    },\n    clearInput () {\n      this.inputTextarea = ''\n    },\n    async runDiscoverer () {\n      this.results = []\n      var fCorrect = this.formatCorrect()\n      if (fCorrect === true) {\n        console.log('Correct format, RUN!')\n        this.formatErrorVisible = false\n        this.querying = true\n        this.query = true\n        this.ToolDiscovererCall()\n        console.log('done')\n      } else {\n        this.lineNum = fCorrect\n        this.formatErrorVisible = true\n      }\n    },\n    formatCorrect () {\n      var lines = this.inputTextarea.split(/\\r?\\n/g)\n      var csvLineRegex = /^([^\\r\\n;]*),([\" *\"]?\\d+(\\.\\d+)?)$/\n      for (var i = 0; i < lines.length; i++) {\n        var lineValid = csvLineRegex.test(lines[i])\n        if (lineValid === true) {\n          continue\n        } else {\n          return i + 1\n        }\n      }\n      return true\n    },\n    ToolDiscovererCall () {\n      axios({\n        method: 'post',\n        url: 'http://127.0.0.1:5000/',\n        data: {\n          textarea_content: this.inputTextarea\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n        .then(\n          (response) => {\n            this.results = response.data.message\n            this.querying = false\n            this.resultsVisible = true\n          })\n        .then(\n          (error) => {\n            console.log(error)\n          })\n    }\n  }\n}\n</script>\n<style>\n#errorFormat{\n  color: darkred;\n  font-size: small;\n}\n.input-run-btn{\n    width: 3em;\n    border: 1px solid green;\n    background-color: green;\n    color: white;\n    font-weight: bold;\n    margin: 1em;\n    margin-left: 0;\n}\n.input-aid-btn{\n    border: 1px solid grey; \n    color: grey;\n    background-color: white;\n    padding: 2%;\n    margin: 2px;\n    width: 100%;\n    margin-top: 1em;\n}\n.input_label{\n    font-size: smaller;\n    font-weight: bold;\n}\n.run_main{\n    text-align: left;\n    align-items: left;\n    margin-bottom: 2em;\n    font-size: smaller;\n}\n\n</style>\n"]}]}