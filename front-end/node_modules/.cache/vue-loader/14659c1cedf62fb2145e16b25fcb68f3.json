{"remainingRequest":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/src/components/Results.vue?vue&type=template&id=76e582f6&","dependencies":[{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/src/components/Results.vue","mtime":1642703980837},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/node_modules/cache-loader/dist/cjs.js","mtime":1640024184632},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640024186248},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/node_modules/cache-loader/dist/cjs.js","mtime":1640024184632},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/app/node_modules/vue-loader/lib/index.js","mtime":1640024185900}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}