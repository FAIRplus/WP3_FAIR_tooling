{"remainingRequest":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/src/views/Run.vue?vue&type=style&index=0&id=172592c1&scoped=true&lang=css&","dependencies":[{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/src/views/Run.vue","mtime":1643704491128},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/css-loader/dist/cjs.js","mtime":1640024185304},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1640024186212},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/postcss-loader/src/index.js","mtime":1640024185644},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1640024184632},{"path":"/home/eva/FAIRplus/tooling/WP3_FAIR_tooling/front-end/node_modules/vue-loader/lib/index.js","mtime":1640024185900}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2Vycm9yRm9ybWF0ewogIGNvbG9yOiBkYXJrcmVkOwogIGZvbnQtc2l6ZTogc21hbGw7Cn0KLmlucHV0LXJ1bi1idG57CiAgICB3aWR0aDogM2VtOwogICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjsKICAgIGNvbG9yOiB3aGl0ZTsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgbWFyZ2luOiAxZW07CiAgICBtYXJnaW4tbGVmdDogMDsKfQouaW5wdXQtYWlkLWJ0bnsKICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7IAogICAgY29sb3I6IGdyZXk7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICAgIHBhZGRpbmc6IDIlOwogICAgbWFyZ2luOiAycHg7CiAgICB3aWR0aDogMTAwJTsKICAgIG1hcmdpbi10b3A6IDFlbTsKfQouaW5wdXRfbGFiZWx7CiAgICBmb250LXNpemU6IHNtYWxsZXI7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoucnVuX21haW57CiAgdGV4dC1hbGlnbjogbGVmdDsKICBhbGlnbi1pdGVtczogbGVmdDsKICBtYXJnaW4tYm90dG9tOiAyZW07CiAgZm9udC1zaXplOiBzbWFsbGVyOwogIHdpZHRoOiAxMDAlOwp9Ci5jZW50ZXJfaW1nIGltZ3sKICBkaXNwbGF5OiBibG9jazsKICBtYXJnaW4tbGVmdDogYXV0bzsKICBtYXJnaW4tcmlnaHQ6IGF1dG87CiAgbWFyZ2luLWJvdHRvbTogMWVtOwogIG1hcmdpbi10b3A6IDFlbTsKfQouY2VudGVyX2ltZ3sKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KI2Vycm9ybXsKICBjb2xvcjogIzkwMDA0OAp9CiNub3RfZm91bmRtewogIGNvbG9yOiAjMzAwNzYxCn0K"},{"version":3,"sources":["Run.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Run.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container run_main\">\n    <div class=\"row\">\n        <h4>Input</h4>\n        <p>Enter keywords and their respective weights (optionally) to discover tools.</p>\n        <div class=\"col-sm-8 d-flex\">\n            <form action=\"\" method=\"post\" id=\"input_text\">\n                <textarea v-model=inputTextarea name=\"input_data\" class=\"form-control\" id=\"input_textarea\" aria-label=\"\"></textarea>\n                <!--div name=\"input_data\" contenteditable=\"true\" id=\"input_textarea\"></div-->\n                <small id=\"\" class=\"form-text text-muted\">For further axplanation on input format, see <a href=\"/help\">here</a>.<br></small>\n                <button type=\"button\" name=\"run\" value=\"Run\" v-on:click=runDiscoverer class=\"input-run-btn\" id=\"run_button\">Run</button>\n                <span v-if=formatErrorVisible id=\"errorFormat\"><i class=\"fas fa-times\"></i> Error: invalid format detected in line <span v-html=\"lineNum\"></span></span>\n            </form>\n        </div>\n        <div class=\"col-sm-4 d-flex\">\n          <ExamplesKeywords @click='sampleInput'/>\n       </div>\n    </div>\n      <div>\n        <div v-if=querying style=\"min-height: 4px;\">\n          <!-- query progress bar, see eaxample https://github.com/vuetifyjs/vuetify/blob/master/packages/docs/src/examples/v-progress-linear/prop-query.vue -->\n          <v-progress-linear\n            v-model=\"value\"\n            :active=\"show\"\n            :indeterminate=\"query\"\n            :query=\"true\"\n          ></v-progress-linear>\n        </div>\n        <div v-if=\"results\"><Results :tools=\"results.result\" :inputParameters=\"results.input_parameters\" :run_id=\"results.run_id\" /></div>\n        <div v-if=\"results_not_found\" class='center_img' id=\"not_foundm\"><img src=\"@/assets/img/not_found.svg\" width=\"50px\"> No tools found for those keywords</div>\n        <div v-if=\"error\" class='center_img' id=\"errorm\"><img src=\"@/assets/img/error.svg\" width=\"50px\"> Something went wrong while fetching results</div>\n      </div>\n</div>\n</template>\n<script>\nimport Results from '../components/Results.vue'\nimport ExamplesKeywords from '../components/ExamplesKeywords.vue'\nimport axios from 'axios'\nexport default {\n  name: 'Run',\n  components: {\n    Results,\n    ExamplesKeywords\n  },\n  created() {\n    // watch the params of the route to fetch the data again\n    this.$watch(\n      () => this.$route.params,\n      () => {\n        this.fetchDataRes()\n      },\n      // fetch the data when the view is created and the data is\n      // already being observed\n      { immediate: true }\n    )\n  },\n  data () {\n    return {\n      inputTextarea: '',\n      formatErrorVisible: false,\n      lineNum: 0,\n      results: null,\n      querying: false,\n      value: 0,\n      query: false,\n      show: true,\n      interval: 0,\n      results_not_found: false,\n      error: false\n    }\n  },\n  methods: {\n    fetchDataRes() {\n      if(this.$route.params.run_id){\n        this.query = true\n        this.querying = true\n        axios.get('http://127.0.0.1:5000/result/fetch', {\n        params : {\n          id : this.$route.params.run_id\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n      .then((response) => {\n        console.log(response.data.message.results)\n        this.results = response.data.message\n        this.results_not_found = !this.results.result_found\n        this.query = false\n        this.querying = false\n        this.error = false\n      })\n      .catch((error) => {\n        console.log(error)\n        this.query = false\n        this.error = true\n        this.querying = false\n      });\n      }else{\n        this.results = null\n      }\n    },\n    sampleInput (text) {\n      this.inputTextarea = text\n    },\n    clearInput () {\n      this.inputTextarea = ''\n    },\n    async runDiscoverer () {\n      this.results = null\n      var fCorrect = this.formatCorrect()\n      if (fCorrect === true) {\n        console.log('Correct format, RUN!')\n        this.formatErrorVisible = false\n        this.querying = true\n        this.query = true\n        this.results_not_found = false\n        this.error = false\n        this.ToolDiscovererCall()\n        console.log('done')\n      } else {\n        this.lineNum = fCorrect\n        this.formatErrorVisible = true\n      }\n    },\n    formatCorrect () {\n      var lines = this.inputTextarea.split(/\\r?\\n/g)\n      var csvLineRegex = /^([^\\r\\n;]*),([\" *\"]?\\d+(\\.\\d+)?)$/\n      for (var i = 0; i < lines.length; i++) {\n        var lineValid = csvLineRegex.test(lines[i])\n        if (lineValid === true) {\n          continue\n        } else {\n          return i + 1\n        }\n      }\n      return true\n    },\n    ToolDiscovererCall () {\n      axios({\n        method: 'post',\n        url: 'http://127.0.0.1:5000/',\n        data: {\n          textarea_content: this.inputTextarea\n        },\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n        .then(\n          (response) => {\n            this.results = response.data.message\n            this.querying = false\n            console.log('NO ERROR HERE')\n            this.results_not_found = !this.results.result_found\n            this.error = false\n            })\n        .catch((error) => {\n          console.log(error)\n          this.query = false\n          this.querying = false\n          this.error = true\n          this.results = null\n          })\n    }\n    }\n  }\n</script>\n<style scoped>\n#errorFormat{\n  color: darkred;\n  font-size: small;\n}\n.input-run-btn{\n    width: 3em;\n    border: 1px solid green;\n    background-color: green;\n    color: white;\n    font-weight: bold;\n    margin: 1em;\n    margin-left: 0;\n}\n.input-aid-btn{\n    border: 1px solid grey; \n    color: grey;\n    background-color: white;\n    padding: 2%;\n    margin: 2px;\n    width: 100%;\n    margin-top: 1em;\n}\n.input_label{\n    font-size: smaller;\n    font-weight: bold;\n}\n.run_main{\n  text-align: left;\n  align-items: left;\n  margin-bottom: 2em;\n  font-size: smaller;\n  width: 100%;\n}\n.center_img img{\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 1em;\n  margin-top: 1em;\n}\n.center_img{\n  text-align: center;\n}\n#errorm{\n  color: #900048\n}\n#not_foundm{\n  color: #300761\n}\n</style>\n"]}]}